from aiogram import Router, F

from aiogram.filters import Command
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from watchfiles import awatch

import inline_calendar
from bot.keyboards import back_to_objects
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

from months import months, months_selected

from states import States

import DB.database_funcs as db

from DB import prorabs_fetching
import keyboards
from datetime import datetime
from DB import database_funcs

router = Router()


@router.callback_query(F.data == "prorab")
async def handle_prorab(callback: CallbackQuery, state: FSMContext):
    if await prorabs_fetching.is_prorab(callback.from_user.id):
        await database_funcs.add_prorab(callback.from_user.id)
        await callback.message.edit_text("–¢–µ–ø–µ—Ä—å –≤—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ –±–æ—Ç–µ. "
                                         "–ß—Ç–æ–±—ã –∑–∞–ø–æ–ª–Ω–∏—Ç—å –¥–Ω–µ–≤–Ω–æ–π –æ—Ç—á–µ—Ç –ø–æ –æ–±—ä–µ–∫—Ç—É –Ω–∞–ø–∏—à–∏—Ç–µ /fill "
                                         "(–ª–∏–±–æ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ —ç—Ç—É –∫–æ–º–∞–Ω–¥—É)")
    elif callback.message.text != "–ö–∞–∂–µ—Ç—Å—è, —á—Ç–æ –≤—ã –Ω–µ –ø—Ä–æ—Ä–∞–±":
        await callback.message.edit_text("–ö–∞–∂–µ—Ç—Å—è, —á—Ç–æ –≤—ã –Ω–µ –ø—Ä–æ—Ä–∞–±", reply_markup=keyboards.try_prorab_again)



@router.callback_query(F.data == "installer")
async def handle_prorab(callback: CallbackQuery, state: FSMContext):
    installer = True
    if installer:  # –ï—Å—Ç—å –ª–∏ –ø—Ä–æ—Ä–∞–± –≤ —Ç–∞–±–ª–∏—Ü–µ
        await database_funcs.add_installer(callback.from_user.id)
        await callback.message.edit_text("–¢–µ–ø–µ—Ä—å –≤—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ –±–æ—Ç–µ. "
                                         "–í–∞–º –±—É–¥—É—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–∏ –≤–µ–¥–æ–º–æ—Å—Ç–µ–π –ø—Ä–æ—Ä–∞–±–∞–º–∏")


@router.message(Command("fill"))
async def fill_report(message: Message, state: FSMContext):
    if not await db.prorab_exists(message.from_user.id):
        await message.answer("–î–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –æ—Ç—á–µ—Ç–æ–≤ –Ω—É–∂–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –≤ –±–æ—Ç–µ. –î–ª—è —ç—Ç–æ–≥–æ –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ /start")
    else:
        if await prorabs_fetching.is_prorab(message.from_user.id):
            keyboard = await keyboards.objects_to_keyboard(message.from_user.id)
            if keyboard is not None:
                await message.answer("–í—ã–±–µ—Ä–∏ –æ–±—ä–µ–∫—Ç:", reply_markup=keyboard)
            else:
                await message.answer("–ü–æ—Ö–æ–∂–µ, —á—Ç–æ –≤–∞–º –Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω –Ω–∏ –æ–¥–∏–Ω –æ–±—ä–µ–∫—Ç.")
        else:
            await message.answer("–ö–∞–∂–µ—Ç—Å—è, —á—Ç–æ –≤—ã –Ω–µ –ø—Ä–æ—Ä–∞–±")


@router.callback_query(F.data.startswith("obj_"))
async def select_object(callback: CallbackQuery, state: FSMContext):
    month = datetime.today().month
    year = datetime.today().year
    obj_name = callback.data.split('_', 2)[2]
    await callback.message.edit_text(f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –¥–ª—è –æ–±—ä–µ–∫—Ç–∞\n*{obj_name}*",
                                     parse_mode='Markdown',
                                     reply_markup=await inline_calendar.create_calendar(month, year, state))


@router.callback_query(F.data == "back_to_objects")
async def back_to_objects(callback: CallbackQuery):
    keyboard = await keyboards.objects_to_keyboard(callback.from_user.id)
    if keyboard:
        await callback.message.edit_text("–í—ã–±–µ—Ä–∏ –æ–±—ä–µ–∫—Ç:", reply_markup=keyboard)


@router.callback_query(F.data == "prev_month")
async def prev_month(callback: CallbackQuery, state: FSMContext):
    state_data = await state.get_data()
    month, year = state_data.get('month', datetime.today().month), state_data.get('year', datetime.today().year)
    month -= 1
    if month < 1:
        month = 12
        year -= 1
    await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å:",
                                     reply_markup=await inline_calendar.create_calendar(month, year, state))


@router.callback_query(F.data == "next_month")
async def next_month(callback: CallbackQuery, state: FSMContext):
    state_data = await state.get_data()
    month, year = state_data.get('month', datetime.today().month), state_data.get('year', datetime.today().year)
    month += 1
    if month > 12:
        month = 1
        year += 1
    await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å:",
                                     reply_markup=await inline_calendar.create_calendar(month, year, state))


@router.callback_query(F.data.startswith("day_"))
async def select_day(callback: CallbackQuery, state: FSMContext):
    state_data = await state.get_data()
    month, year = state_data.get('month', datetime.today().month), state_data.get('year', datetime.today().year)
    day = int(callback.data.split("_")[1])
    keyboard = await keyboards.groups_to_keyboard()
    await callback.message.edit_text(
        f"–í—ã –≤—ã–±—Ä–∞–ª–∏: *{day} {months_selected[month]} {year}*\n\n–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—ã —Ä–∞–±–æ—Ç, "
        f"–∫–æ—Ç–æ—Ä—ã–º–∏ –≤—ã –∑–∞–Ω–∏–º–∞–ª–∏—Å—å, –∏, –ø–æ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –æ—Ç—á–µ—Ç–∞, –Ω–∞–∂–º–∏—Ç–µ\n*–û—Ç–ø—Ä–∞–≤–∏—Ç—åüì®*",
        parse_mode='Markdown', reply_markup=keyboard)


@router.callback_query(F.data.count('.') == 0)
async def subgroups(callback: CallbackQuery, state: FSMContext):
    keyboard = await keyboards.subgroups_to_keyboard(callback.data)
    await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥–≥—Ä—É–ø–ø—É:", reply_markup=keyboard)